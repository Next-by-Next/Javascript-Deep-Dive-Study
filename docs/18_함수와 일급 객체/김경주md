## 18장 함수와 읽급 객체

<br>

### 18.1 일급 객체

---

다음과 같은 조건을 만족하는 객체를 **일급 객체**라 한다.

- 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.
- 변수나 자료구조(객체, 배열 등)에 저장할 수 있다.
- 함수의 매개변수에 전달할 수 있다.
- 함수의 반환값으로 사용할 수 있다.

자바스크립트의 함수는 위의 조건을 모두 만족하므로 일급 객체이다.

```js
// 1. 함수는 무명의 리터럴로 생성할 수 있다.
// 2. 함수는 변수에 저장할 수 있다.
// 런타임(할당 단계)에 함수 리터럴이 평가되어 함수 객체가 생성되고 변수에 할당된다.
const increase = function (num) {
  return ++num;
};

const decrease = function (num) {
  return --num;
};

// 2. 함수는 객체에 저장할 수 있다.
const auxs = { increase, decrease };

// 3. 함수의 매개변수에 전달할 수 있다.
// 4. 함수의 반환값으로 사용할 수 있다.
function makeCounter(aux) {
  let num = 0;

  return function () {
    num = aux(num);
    return num;
  };
}

// 3. 함수는 매개변수에게 함수를 전달할 수 있다.
const increaser = makeCounter(auxs.increase);
console.log(increaser()); // 1
console.log(increaser()); // 2

// 3. 함수는 매개변수에게 함수를 전달할 수 있다.
const increaser = makeCounter(auxs.decrease);
console.log(decreaser()); // -1
console.log(decreaser()); // -2
```

함수가 일급 객체라는 것은 함수를 객체와 동일하게 사용할 수 있다는 의미다. 객체는 값이므로 함수는 값과 동일하게 취급할 수 있다.

함수는 객체이지만 일반 객체와는 다르게 호출할 수 있고 일반 객체에는 없는 함수 고유의 프로퍼티를 소유한다.

<br>

### 18.2 함수 객체의 프로퍼티

---

함수는 객체이기에 프로퍼티를 가질 수 있다.

```javascript
function square(number) {
  return number * number;
}

console.log(Object.getOwnPropertyDescriptors(square));
/*
{
    length: { value: 1, writable: false, enumerable: false, configurable: true },
    name: { value: "square", writable: false, enumerable: false, configurable: true },
    arguments: { value: null, writable: false, enumerable: false, configurable: false },
    caller: { value: null, writable: false, enumerable: false, configurable: false },
    prototype: { value: {...}, writable: true, enumerable: false, configurable: false }
}
*/

// __proto__는 square 함수의 프로퍼티가 아니다.
console.log(Object.getOwnPropertyDescriptors(square, "__proto__")); // undefined

// __proto__는 Object.prototype 객체의 접근자 프로퍼티다.
// square 함수는 Object.prototype 객체로부터 __proto__ 접근자 프로퍼티를 상속받는다.
console.log(Object.getOwnPropertyDescriptors(Object.prototype, "__proto__"));
// {get: f, set: f, enumerable: false, configurable: true}
```

이처럼 `arguments`, `caller`, `length`, `name`, `prototype` 프로퍼티는 모든 함수 객체의 프로퍼티다. 하지만 `__proto__`는 접근자 프로퍼티이며, 함수 객체 고유의 프로퍼티가 아니라 `Object.prototype` 객체의 프로퍼티를 상속받은 것이다.

<br>

#### 18.2.1 arguments 프로퍼티

함수 객체의 `arguments` 프로퍼티 값은 `arguments` 객체다.
함수 호출 시 전달된 인수의 정보를 담고 있는 순회 가능한 유사 배열 객체이며, 함수 내부에서 지역 변수처럼 사용된다. <br>
함수 내부에서 `arguments` 객체를 지역 변수처럼 사용된다.

```js
function multiply(x, y) {
  console.log(arguments);
  return x * y;
}

console.log(multiply()); // NaN
console.log(multiply(1)); // NaN
console.log(multiply(1, 2)); // 2
console.log(multiply(1, 2, 3)); // 2
```

함수를 정의할 때 선언한 매개변수는 함수 몸체 내부에서 변수와 동일하게 취급된다. 즉 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 선언되고 `undefined로` 초기화된 이후 인수가 할당된다.

선언된 매개변수의 개수보다 인수를 적게 전달했을 경우 매개변수는 `undefined로` 초기화된 상태를 유지하고, 더 많이 전달한 경우 초과한 인수는 무시된다. 하지만 초과한 인수가 그냥 버려지는 것은 아니고 모든 인수는 암묵적으로 `arguments` 객체의 프로퍼티로 보관된다.

`arguments` 객체는 매개변수 개수를 확정할 수 없는 **가변 인자 함수**를 구현할 때 유용하다.

```js
function sum() {
  let res = 0;

  // arguments 객체는 length 프로퍼티가 있는 유사 객체이므로 for문으로 순회 가능
  for (let i = 0; i < arguments.length; i++) {
    res += arguments[i];
  }

  return res;
}

console.log(sum()); // 0
console.log(sum(1, 2)); // 3
console.log(sum(1, 2, 3)); // 6
```

<br>

#### 18.2.2 caller 프로퍼티

함수 객체의 `caller` 프로퍼티는 함수 자신을 호출한 함수를 가르킨다.

<br>

#### 18.2.3 length 프로퍼티

함수 객체의 `length` 프로퍼티는 함수를 정의할 때 선언한 매개변수의 개수를 기르킨다.

```js
function foo() {}
console.log(foo.length); // 0

function bar(x) {
  return x;
}
console.log(bar.length); // 1

function baz(x, y) {
  return x * y;
}
console.log(baz.length); // 2
```

<br>

#### 18.2.4 name 프로퍼티

함수 객체의 `name` 프로퍼티는 함수 이름을 나타낸다.<br>
ES6에서는 함수 객체를 가리키는 식별자를 값으로 갖는다.

```js
// 기명 함수 표현식
var namedFunc = function foo() {};
console.log(namedFunc.name); // foo

// 익명 함수 표현식
var anonymousFunc = function () {};
// ES5: name 프로퍼티는 빈 문자열을 값으로 가짐
// ES6: name 프로퍼티는 함수 객체를 가리키는 이름을 값으로 가짐
console.log(anonymousFunc.name); // anonymousFunc

// 함수 선언문
function bar() {}
console.log(bar.name); // bar
```

<br>

#### 18.2.5 `__proto__` 접근자 프로퍼티

모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는다.<br>
`__proto__`프로퍼티는 [[Prototype]] 내부 슬롯이 가리키는 프로퍼티타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티다. [[Prototype]] 내부 슬롯에도 직접 접근할 수 없으며 `__proto__`접근자 프로퍼티를 통해 간접적으로 프로토타입 객체에 접근할 수 있다.

```js
const obj = { a: 1 };

// 객체 리터럴 방식으로 생성한 객체의 프로토타입 객체는 Object.prototype
console.log(obj.__proto__ === Object.prototype); // true

// 객체 리터럴 방식으로 생성한 객체는 프로토타입 객체인 Object.prototype의 프로퍼티를 상속받음
// hasOwnProperty 메서드는 Object.prototype의 메서드임
console.log(obj.hasOwnProperty("a")); // true
console.log(obj.hasOwnProperty("__proto__")); // false
```

<br>

#### 18.2.6 prototype 프로퍼티

`prototype` 프로퍼티는 생성자 함수로 호출할 수 있는 함수 객체 즉, constructor만이 소유하는 프로퍼티다.

```js
// 함수 객체는 prototype 프로퍼티를 소유함
(function () {}).hasOwnProperty("prototype"); // true

//일반 객체는 prototype 프로퍼티를 소유하지 않음
({}).hasOwnProperty("prototype"); // false
```

`prototype` 프로퍼티는 함수가 객체를 생성하는 생성자 함수로 호출될 때 생성자 함수가 생성할 인스턴스의 프로토타입 객체를 가리킨다.
