# 변수

### 4.1 변수란 무엇인가? 왜 필요한가?

---

메모리 주소를 통해 값에 직접 접근하는 것은 치명적 오류를 발생시킬 가능성이 높다.

> 메모리
> 
- 메모리는 데이터를 저장할 수 있는 `메모리 셀`의 집합체
- 메모리 셀 하나의 크기는 1바이트(8비트)
- 각 셀은  고유의 메모리 주소를 가진다.

<aside>
💡 **변수** : 하나의 값을 저장하기 위해 확보한 메모리 공간 혹은 그 메모리 공간을 식별하기 위해 붙인 이름

</aside>

`변수 이름` - 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름.

`변수 값` - 변수에 저장된 값.

`할당` - 변수에 값을 저장하는 행위.

`참조` - 변수에 저장된 값을 읽어 들이는 행위.

### 4.2 식별자

---

`식별자` - 어떤 값을 구별해서 식별할 수 있는 고유한 이름.

- 식별자는 어떤 값이 저장되어 있는 **메모리 주소**를 기억(저장)해야 한다.

<aside>
💡 **식별자는 값이 아니라 메모리 주소를 기억하고 있다**.

</aside>

### 4.3 변수 선언

---

`변수 선언` - 변수를 생성하는 것

- 메모리 공간을 확보(allocate)하고 변수명과 확보된 메모리 공간의 주소를 연결(name binding).
- 확보된 메모리 공간에는 자바스크립트 엔진에 의해 `undefined`라는 값이 암묵적으로 할당되어 초기화된다.

> **var 키워드의 대표적인 단점은 `block-level scope`를 지원하지 않고 `function-level-scope`를 지원한다는 것이다**. 이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.
> 

`실행 컨텍스트(execution context)` - 자바스크립트 엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역.

 

### 4.4 변수 선언의 실행 시점과 변수 호이스팅

---

<aside>
💡 **변수 선언은 런타임이 아니라그이전 단계에서 먼저 실행된다.**

</aside>

`변수 호이스팅(variable hoisting)` - 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징.

### 4.5 값의 할당

---

<aside>
💡 **값의 할당은 런타임에 실행된다.**

</aside>

### 4.6 값의 재할당

---

**가비지 콜렉터**

- 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제하는 기능.
- 자바스크립트는 가비지 콜렉터를 내장하고 있는 매니지드 언어로서 가비지 콜렉터를 통해 `메모리 누수`를 방지한다.

**메모리 관리 방식에 따른 언어 분류**

언매니지드 언어

- C 언어와 같이 저수준 메모리 제어 기능을(malloc, free) 통해 개발자의 역량에 따라 최적의 성능을 확보 가능. 단, 치명적인 오류 발생 가능성도 높아짐.

매니지드 언어

- 가비지 콜렉터를 통해 메모리 해제를 관리함. 어느 정도 일정한 생산성 확보 가능. 단, 성능 면에서 손실 감수.

### 4.7 식별자 네이밍 규칙

---

- 식별자는 특수문자를 제외한 문자, 숫자, underscore, dollar sign을 포함할 수 있다.
- 식별자는 숫자로 시작하면 안된다.
- 당연히, 예약어는 식별자로 사용 불가.
